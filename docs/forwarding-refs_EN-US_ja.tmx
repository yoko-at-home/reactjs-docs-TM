<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.2_0_6a661c5e0" segtype="sentence" srclang="EN-US"/>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>---
id: forwarding-refs
title: Forwarding Refs
permalink: docs/forwarding-refs.html
---</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>---
id: forwarding-refs
title: ref のフォワーディング
permalink: docs/forwarding-refs.html
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ref forwarding is a technique for automatically passing a [ref](/docs/refs-and-the-dom.html) through a component to one of its children.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>ref のフォワーディングはあるコンポーネントを通じてその子コンポーネントのひとつに [ref](/docs/refs-and-the-dom.html) を自動的に渡すテクニックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is typically not necessary for most components in the application.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>これは基本的にはアプリケーション内のほとんどのコンポーネントで必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, it can be useful for some kinds of components, especially in reusable component libraries.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>しかし、コンポーネントの種類によっては、特に再利用可能なコンポーネントライブラリにおいては、便利なものとなるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most common scenarios are described below.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>一般的なシナリオについて以下で述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Forwarding refs to DOM components {#forwarding-refs-to-dom-components}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>## DOM コンポーネントに ref をフォワーディングする {#forwarding-refs-to-dom-components}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Consider a `FancyButton` component that renders the native `button` DOM element:
`embed:forwarding-refs/fancy-button-simple.js`</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>ネイティブの `button` DOM 要素をレンダーする `FancyButton` というコンポーネントを考えてみましょう：
`embed:forwarding-refs/fancy-button-simple.js`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React components hide their implementation details, including their rendered output.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>React コンポーネントは、レンダーの結果も含め、実装の詳細を隠蔽します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other components using `FancyButton` **usually will not need to** [obtain a ref](/docs/refs-and-the-dom.html) to the inner `button` DOM element.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`FancyButton` を使用する他のコンポーネントは内側の `button` DOM 要素に対する [ref を取得する](/docs/refs-and-the-dom.html)**必要は通常ありません** 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is good because it prevents components from relying on each other's DOM structure too much.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>これは、互いのコンポーネントの DOM 構造に過剰に依存することを防ぐので、良いことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although such encapsulation is desirable for application-level components like `FeedStory` or `Comment`, it can be inconvenient for highly reusable "leaf" components like `FancyButton` or `MyTextInput`.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>そういったカプセル化は `FeedStory` や `Comment` のようなアプリケーションレベルのコンポーネントでは望ましいことではありますが、`FancyButton` や `MyTextInput` といった非常に多くのところで再利用可能な "末梢の" コンポーネントでは不便である可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These components tend to be used throughout the application in a similar manner as a regular DOM `button` and `input`, and accessing their DOM nodes may be unavoidable for managing focus, selection, or animations.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>このようなコンポーネントは、アプリケーションのいたるところで通常の DOM である `button` や `input` と同様に扱われる傾向にあり、フォーカス、要素の選択、アニメーションをこなすにはそれら DOM ノードにアクセスすることが避けられないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**Ref forwarding is an opt-in feature that lets some components take a `ref` they receive, and pass it further down (in other words, "forward" it) to a child.**</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>**ref のフォワーディングはオプトインの機能であり、それにより、コンポーネントが `ref` を受け取って、それをさらに下層の子に渡せる（つまり、ref を "転送" できる）ようになります。**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the example below, `FancyButton` uses `React.forwardRef` to obtain the `ref` passed to it, and then forward it to the DOM `button` that it renders:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>下の例では、`FancyButton` は渡された `ref` を取得して、それをレンダーする `button` DOM にフォワーディングするために、`React.forwardRef` を使っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This way, components using `FancyButton` can get a ref to the underlying `button` DOM node and access it if necessary—just like if they used a DOM `button` directly.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>このように、`FancyButton` を使ったコンポーネントは下層の `button` DOM ノードの ref を取得することができ、必要であれば `button` DOM を直接使うかのように、DOM にアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is a step-by-step explanation of what happens in the above example:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>上の例で、何が起こっているかを順々に説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We create a [React ref](/docs/refs-and-the-dom.html) by calling `React.createRef` and assign it to a `ref` variable.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`React.createRef` を呼び、[React ref](/docs/refs-and-the-dom.html) をつくり、それを `ref` 変数に代入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We pass our `ref` down to `&lt;FancyButton ref={ref}&gt;` by specifying it as a JSX attribute.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`ref` を `&lt;FancyButton ref={ref}&gt;` に JSX の属性として指定することで渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React passes the `ref` to the `(props, ref) =&gt; ...` function inside `forwardRef` as a second argument.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>React は `ref` を、`forwardRef` 内の関数 `(props, ref) =&gt; ...` の 2 番目の引数として渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We forward this `ref` argument down to `&lt;button ref={ref}&gt;` by specifying it as a JSX attribute.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>この引数として受け取った `ref` を `&lt;button ref={ref}&gt;` に JSX の属性として指定することで渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the ref is attached, `ref.current` will point to the `&lt;button&gt;` DOM node.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>この ref が紐付けられると、`ref.current` は `&lt;button&gt;` DOM ノードのことを指すようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;Note
&gt;
&gt;The second `ref` argument only exists when you define a component with `React.forwardRef` call.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>&gt;補足
&gt;
&gt; 2 番目の引数 `ref` は `React.forwardRef` の呼び出しを使ってコンポーネントを定義したときにだけ存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Regular function or class components don't receive the `ref` argument, and ref is not available in props either.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>通常の関数またはクラスコンポーネントは `ref` 引数を受け取らず、ref は props からも利用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;
&gt;Ref forwarding is not limited to DOM components.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>&gt;
&gt; ref のフォワーディング先は DOM コンポーネントだけにとどまりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can forward refs to class component instances, too.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>クラスコンポーネントインスタンスに対しても ref をフォワーディングできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Note for component library maintainers {#note-for-component-library-maintainers}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>## コンポーネントライブラリのメンテナ向けの補足 {#note-for-component-library-maintainers}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**When you start using `forwardRef` in a component library, you should treat it as a breaking change and release a new major version of your library.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>**コンポーネントライブラリの中で、`forwardRef` を使い始めた場合、破壊的変更として扱い、新しいメジャーバージョンをリリースすべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>** This is because your library likely has an observably different behavior (such as what refs get assigned to, and what types are exported), and this can break apps and other libraries that depend on the old behavior.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>**ライブラリが外から見て今までと違う挙動（例えば、どの値が ref に代入されるかや、どの型がエクスポートされるのか）をする可能性があり、古い挙動に依存しているアプリケーションや他のライブラリを壊す可能性があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conditionally applying `React.forwardRef` when it exists is also not recommended for the same reasons: it changes how your library behaves and can break your users' apps when they upgrade React itself.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`React.forwardRef` が存在する場合だけ、条件的に `React.forwardRef` を適用することも同じ理由で推奨されません：そのような実装は、React そのものを更新したとき、ライブラリがどのように振る舞うかを変えてしまい、ユーザのアプリケーションを破壊する可能性があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Forwarding refs in higher-order components {#forwarding-refs-in-higher-order-components}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>## 高階コンポーネントにおける ref のフォワーディング {#forwarding-refs-in-higher-order-components}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This technique can also be particularly useful with [higher-order components](/docs/higher-order-components.html) (also known as HOCs).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>このテクニックは[高階コンポーネント](/docs/higher-order-components.html)（HOC としても知られています）においても特に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's start with an example HOC that logs component props to the console:
`embed:forwarding-refs/log-props-before.js`</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>コンポーネントの props をコンソールにログ出力する HOC を例として考えてみましょう。`embed:forwarding-refs/log-props-before.js`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The "logProps" HOC passes all `props` through to the component it wraps, so the rendered output will be the same.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>"logProps" HOC はすべての `props` をラップするコンポーネントに渡すので、レンダーされる出力は同じになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, we can use this HOC to log all props that get passed to our "fancy button" component:
`embed:forwarding-refs/fancy-button.js`</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>例えば、"fancy button" コンポーネントに渡されるすべての props をログとして記録するために、この HOC を使用することができます。`embed:forwarding-refs/fancy-button.js`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is one caveat to the above example: refs will not get passed through.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>ところが上記の例には欠陥があります。これでは ref が渡されないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>That's because `ref` is not a prop.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`ref` は props のひとつではないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Like `key`, it's handled differently by React.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`key` と同様に ref は React では props とは違う扱いになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>HOC に対する ref を追加した場合、ラップされたコンポーネントではなく、一番外側のコンテナコンポーネントを参照します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that refs intended for our `FancyButton` component will actually be attached to the `LogProps` component:
`embed:forwarding-refs/fancy-button-ref.js`</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>これは `FancyButton` コンポーネントに紐付けられることを意図した ref  が、実際には `LogProps` コンポーネントに紐付けられてしまうことを意味します。`embed:forwarding-refs/fancy-button-ref.js`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Fortunately, we can explicitly forward refs to the inner `FancyButton` component using the `React.forwardRef` API.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>幸いにも、`React.forwardRef` API を使って、内側の `FancyButton` コンポーネントに対して ref を明示的に転送することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>`React.forwardRef` accepts a render function that receives `props` and `ref` parameters and returns a React node.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`React.forwardRef` は render 関数を受け取り、その関数は `props` と `ref` を引数として取り、React ノードを返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example:
`embed:forwarding-refs/log-props-after.js`</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>例えば、
`embed:forwarding-refs/log-props-after.js`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Displaying a custom name in DevTools {#displaying-a-custom-name-in-devtools}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>## DevTools でのカスタム名表示 {#displaying-a-custom-name-in-devtools}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>`React.forwardRef` accepts a render function.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>`React.forwardRef` は render 関数を受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React DevTools uses this function to determine what to display for the ref forwarding component.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>React DevTools は ref をフォワーディングしているコンポーネントとして何を表示すべきかを決定するために、この関数を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following component will appear as "*ForwardRef*" in the DevTools:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>例えば、次のコンポーネントは "*ForwardRef*" として DevTools に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you name the render function, DevTools will also include its name (e.g. "*ForwardRef(myFunction)*"):</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>render 関数に名前をつけると、DevTools はその名前を含めるようになります（例： "*ForwardRef(myFunction)*"）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can even set the function's `displayName` property to include the component you're wrapping:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052823Z">
        <seg>ラップしているコンポーネントを含めるために、render 関数の `displayName` を設定することもできます：</seg>
      </tuv>
    </tu>
  </body>
</tmx>
