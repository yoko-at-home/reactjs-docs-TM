<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.2_0_6a661c5e0" segtype="sentence" srclang="EN-US"/>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>---
id: rendering-elements
title: Rendering Elements
permalink: docs/rendering-elements.html
redirect_from:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>---
id: rendering-elements
title: 要素のレンダー
permalink: docs/rendering-elements.html
redirect_from:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Elements are the smallest building blocks of React apps.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>要素とは React アプリケーションの最小単位の構成ブロックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element describes what you want to see on the screen:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>要素は画面上に表示したいものの説明書きです：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike browser DOM elements, React elements are plain objects, and are cheap to create.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>ブラウザの DOM 要素とは異なり、React 要素はプレーンなオブジェクトであり、安価に作成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React DOM takes care of updating the DOM to match the React elements.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>React DOM が React 要素に合致するように DOM を更新する作業を担当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;**Note:**
&gt;
&gt;One might confuse elements with a more widely known concept of "components".</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>&gt;**補足:**
&gt;
&gt;要素のことを、より広く知られている概念である "コンポーネント" と混同する人もいるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We will introduce components in the [next section](/docs/components-and-props.html).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>コンポーネントについては[次の章](/docs/components-and-props.html)で説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Elements are what components are "made of", and we encourage you to read this section before jumping ahead.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>要素とはコンポーネントを "構成する" ものです。次に進む前にこの章を読んでいくことをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Rendering an Element into the DOM {#rendering-an-element-into-the-dom}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>## 要素を DOM として描画する {#rendering-an-element-into-the-dom}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's say there is a `&lt;div&gt;` somewhere in your HTML file:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>HTML ファイルの中に `&lt;div&gt;` 要素があったとしましょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We call this a "root" DOM node because everything inside it will be managed by React DOM.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>この中にあるもの全てが React DOM によって管理されることになるので、"ルート" DOM ノードと呼ぶことにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Applications built with just React usually have a single root DOM node.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>React だけで構築されたアプリケーションは、通常ルート DOM ノードをひとつだけ持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>既存のアプリに React を統合しようとしている場合は、独立したルート DOM ノードを好きなだけ持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To render a React element into a root DOM node, pass both to [`ReactDOM.render()`](/docs/react-dom.html#render):</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>React 要素をルート DOM ノードにレンダーするには、その 2 つを [`ReactDOM.render()`](/docs/react-dom.html#render) に渡します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It displays "Hello, world" on the page.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>このコードはページに "Hello, world" を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Updating the Rendered Element {#updating-the-rendered-element}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>## レンダーされた要素の更新 {#updating-the-rendered-element}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React elements are [immutable](https://en.wikipedia.org/wiki/Immutable_object).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>React 要素は[イミュータブル](https://en.wikipedia.org/wiki/Immutable_object)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once you create an element, you can't change its children or attributes.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>一度要素を作成すると、その子要素もしくは属性を変更することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An element is like a single frame in a movie: it represents the UI at a certain point in time.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>要素は映画の中のひとつのフレームのようなものであり、それは特定のある時点の UI を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to [`ReactDOM.render()`](/docs/react-dom.html#render).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>ここまでで分かる通り、UI を更新する唯一の方法は、新しい要素を作成して [`ReactDOM.render()`](/docs/react-dom.html#render) に渡すことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Consider this ticking clock example:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>以下の秒刻みで動く時計の例について考えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It calls [`ReactDOM.render()`](/docs/react-dom.html#render) every second from a [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval) callback.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>上記のコードでは [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval) のコールバックから [`ReactDOM.render()`](/docs/react-dom.html#render) を毎秒呼び出しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;**Note:**
&gt;
&gt;In practice, most React apps only call [`ReactDOM.render()`](/docs/react-dom.html#render) once.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>&gt;**補足:**
&gt;
&gt;実際には大抵の React アプリケーションは [`ReactDOM.render()`](/docs/react-dom.html#render) を一度しか呼び出しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next sections we will learn how such code gets encapsulated into [stateful components](/docs/state-and-lifecycle.html).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>次の章では上記のようなコードをどのように[ステート付きコンポーネント](/docs/state-and-lifecycle.html)へとカプセル化するのかを学びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;
&gt;We recommend that you don't skip topics because they build on each other.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>&gt;
&gt;トピックはお互いを基礎として構成されているため、読み飛ばさないことをお勧めします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## React Only Updates What's Necessary {#react-only-updates-whats-necessary}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>## React は必要な箇所のみを更新する {#react-only-updates-whats-necessary}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>React DOM は要素とその子要素を以前のものと比較し、DOM を望ましい状態へと変えるのに必要なだけの DOM の更新を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can verify by inspecting the [last example](codepen://rendering-elements/update-rendered-element) with the browser tools:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>このことは、[最後の例](codepen://rendering-elements/update-rendered-element)をブラウザツールで調査すれば確認できます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>毎秒ごとに UI ツリー全体を表す要素を作成しているにも関わらず、内容が変更されたテキストノードのみが React DOM により更新されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072445Z">
        <seg>私達の経験上、時間の経過によりどのように UI が変更されるかを考えるよりも、任意の時点において UI がどのように見えるべきかを考えることで、あらゆる類のバグを排除することができます。</seg>
      </tuv>
    </tu>
  </body>
</tmx>
