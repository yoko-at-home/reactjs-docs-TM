<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.2_0_6a661c5e0" segtype="sentence" srclang="EN-US"/>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>---
id: fragments
title: Fragments
permalink: docs/fragments.html
---</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>---
id: fragments
title: フラグメント
permalink: docs/fragments.html
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A common pattern in React is for a component to return multiple elements.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>React でよくあるパターンの 1 つに、コンポーネントが複数の要素を返すというものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Fragments let you group a list of children without adding extra nodes to the DOM.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>フラグメント (fragment) を使うことで、DOM に余分なノードを追加することなく子要素をまとめることができるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is also a new [short syntax](#short-syntax) for declaring them.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>このようなものを宣言するための[短い記法](#short-syntax)もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Motivation {#motivation}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>## 動機 {#motivation}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A common pattern is for a component to return a list of children.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>コンポーネントが子要素のリストを返すというのはよくあるパターンです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Take this example React snippet:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>この React スニペットを例にしましょう：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>`&lt;Columns /&gt;` would need to return multiple `&lt;td&gt;` elements in order for the rendered HTML to be valid.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>レンダーされる HTML が正しいものであるためには、`&lt;Columns /&gt;` は複数の `&lt;td&gt;` 要素を返す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If a parent div was used inside the `render()` of `&lt;Columns /&gt;`, then the resulting HTML will be invalid.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>`&lt;Columns /&gt;` 中の `render()` 内で親として div 要素を使ってしまうと、結果として出力される HTML は不正なものとなってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>results in a `&lt;Table /&gt;` output of:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>上記では、以下のような `&lt;Table /&gt;` の出力となってしまいます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Fragments solve this problem.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>フラグメントはこのような問題を解決します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Usage {#usage}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>## 使い方 {#usage}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>which results in a correct `&lt;Table /&gt;` output of:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>上記は、以下のような正しい `&lt;Table /&gt;` の出力となります：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Short Syntax {#short-syntax}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>### 短い記法 {#short-syntax}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is a new, shorter syntax you can use for declaring fragments.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>フラグメントを宣言するための新しい短縮記法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It looks like empty tags:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>それは空のタグのようにも見えます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use `&lt;&gt;&lt;/&gt;` the same way you'd use any other element except that it doesn't support keys or attributes.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>この `&lt;&gt;&lt;/&gt;` は他の要素と同じように使うことが可能ですが、key や属性のサポートはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Keyed Fragments {#keyed-fragments}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>### key 付きフラグメント {#keyed-fragments}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Fragments declared with the explicit `&lt;React.Fragment&gt;` syntax may have keys.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>明示的に `&lt;React.Fragment&gt;` と宣言したフラグメントでは key を持つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A use case for this is mapping a collection to an array of fragments -- for example, to create a description list:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>これはコレクションをフラグメントの配列に変換するときに有用です。たとえば定義リストを作成する時に利用します：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>`key` is the only attribute that can be passed to `Fragment`.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>`key` はフラグメントに渡すことができる唯一の属性です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the future, we may add support for additional attributes, such as event handlers.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>将来的には、イベントハンドラのような他の属性を渡すこともサポートするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Live Demo {#live-demo}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>### ライブデモ {#live-demo}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can try out the new JSX fragment syntax with this [CodePen](https://codepen.io/reactjs/pen/VrEbjE?editors=1000).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T052944Z">
        <seg>この [CodePen](https://codepen.io/reactjs/pen/VrEbjE?editors=1000) で新しい JSX フラグメントの記法を試すことができます。</seg>
      </tuv>
    </tu>
  </body>
</tmx>
