<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.2_0_6a661c5e0" segtype="sentence" srclang="EN-US"/>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>---
id: concurrent-mode-intro
title: Introducing Concurrent Mode (Experimental)
permalink: docs/concurrent-mode-intro.html
next: concurrent-mode-suspense.html
---</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>---
id: concurrent-mode-intro
title: 並列モードの導入（実験的機能）
permalink: docs/concurrent-mode-intro.html
next: concurrent-mode-suspense.html
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;Caution:
&gt;
&gt;This page was about experimental features that aren't yet available in a stable release. It was aimed at early adopters and people who are curious.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>&gt;警告:
&gt;
&gt; このページはアーリーアダプターや興味のある読者を対象に、安定リリースでまだ利用できない実験的機能を説明するために存在していました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;
&gt;Much of the information on this page is now outdated and exists only for archival purposes.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>&gt;
&gt; このページの説明のほとんどは既に古くなっており、アーカイブの目的のためだけに残しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**Please refer to the [React 18 Alpha announcement post](/blog/2021/06/08/the-plan-for-react-18.html
) for the up-to-date information.**</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>最新の情報については [React 18 アルファのアナウンス](/blog/2021/06/08/the-plan-for-react-18.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&gt;
&gt;Before React 18 is released, we will replace this page with stable documentation.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>&gt;
&gt; React 18 のリリースまでに、このページはより安定したドキュメントに置き換わる予定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This page provides a theoretical overview of Concurrent Mode.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>このページでは並列モードの理論的な概要について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**For a more practical introduction, you might want to check out the next sections:**</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**より実践的な導入方法についてはこれ以降のセクションをお読みください**：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Suspense for Data Fetching](/docs/concurrent-mode-suspense.html) describes a new mechanism for fetching data in React components.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [サスペンスを使ったデータ取得](/docs/concurrent-mode-suspense.html)では React コンポーネントでデータを取得するための新たな仕組みについて解説します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Concurrent UI Patterns](/docs/concurrent-mode-patterns.html) shows some UI patterns made possible by Concurrent Mode and Suspense.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [並列的 UI パターン](/docs/concurrent-mode-patterns.html)では並列モードとサスペンスにより可能となるいくつかの UI パターンを提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Adopting Concurrent Mode](/docs/concurrent-mode-adoption.html) explains how you can try Concurrent Mode in your project.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [並列モードの利用開始](/docs/concurrent-mode-adoption.html)ではあなたのプロジェクトで並列モードを試す方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Concurrent Mode API Reference](/docs/concurrent-mode-reference.html) documents the new APIs available in experimental builds.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [並列モード API リファレンス](/docs/concurrent-mode-reference.html)では実験ビルドで利用可能な新しい API について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## What Is Concurrent Mode?</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>## 並列モードとは？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Concurrent Mode is a set of new features that help React apps stay responsive and gracefully adjust to the user's device capabilities and network speed.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードは、React アプリケーションをレスポンシブに保ち、デバイスの能力やネットワークの速度にうまく適応できるようにするための新機能群です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These features are still experimental and are subject to change.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>これらの機能はまだ実験的なものであり変更される可能性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are not yet a part of a stable React release, but you can try them in an experimental build.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>まだ安定リリースには入っていませんが、実験的ビルドで試すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Blocking vs Interruptible Rendering {#blocking-vs-interruptible-rendering}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>## ブロッキングレンダリングと中断可能レンダリング {#blocking-vs-interruptible-rendering}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**To explain Concurrent Mode, we'll use version control as a metaphor.** If you work on a team, you probably use a version control system like Git and work on branches.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**並列モードの説明のために、バージョンコントロールを使った例え話をします。**チームで働いていれば、Git のようなバージョンコントロールを使ってブランチで作業していることでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a branch is ready, you can merge your work into main so that other people can pull it.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ブランチの準備が完了したら、マスターブランチに作業をマージして、他の人が pull できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before version control existed, the development workflow was very different.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>バージョンコントロールが存在するより前は、開発のワークフローはとても異なったものでした。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There was no concept of branches.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ブランチという概念はありませんでした。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you wanted to edit some files, you had to tell everyone not to touch those files until you've finished your work.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>何かのファイルを編集したいと思ったら、作業が終わるまでそのファイルに触れないよう全員に伝える必要がありました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You couldn't even start working on them concurrently with that person — you were literally *blocked* by them.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>その人と同時には作業を始めることすらできませんでした。文字通り**ブロック**されていたのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This illustrates how UI libraries, including React, typically work today.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>これが React も含む UI ライブラリの現在の動作のしかたです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once they start rendering an update, including creating new DOM nodes and running the code inside components, they can't interrupt this work.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>新しい DOM ノード作成やコンポーネント内部のコードの実行も含む更新のレンダーを一度始めたら、それを中断することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We'll call this approach "blocking rendering".</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>このアプローチのことを "ブロッキングレンダリング (blocking rendering)" と呼ぶことにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Concurrent Mode, rendering is not blocking.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードにおいては、レンダーはブロッキングではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is interruptible.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>中断可能 (interruptible) です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This improves the user experience.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>これによりユーザ体験は向上します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It also unlocks new features that weren't possible before.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>またこれまで不可能だった新たな機能が実現可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before we look at concrete examples in the [next](/docs/concurrent-mode-suspense.html) [chapters](/docs/concurrent-mode-patterns.html), we'll do a high-level overview of new features.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>後で[こちら](/docs/concurrent-mode-suspense.html)や[こちら](/docs/concurrent-mode-patterns.html)の章で具体的な例を見る前に、新たな機能について高所からの概観を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Interruptible Rendering {#interruptible-rendering}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>### 中断可能なレンダリング {#interruptible-rendering}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Consider a filterable product list.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>フィルタ可能な商品リストを考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Have you ever typed into a list filter and felt that it stutters on every key press?</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>リストのフィルタ欄にタイピングしようとして、一打ごとに引っかかりを感じたことはないでしょうか。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some of the work to update the product list might be unavoidable, such as creating new DOM nodes or the browser performing layout.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>商品リストを更新するにあたって、新しい DOM ノードを作成してレイアウトを行う、といった幾つかの作業は必須のものですが、それらを**いつ**、そして**どのように**行うのかが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, *when* and *how* we perform that work plays a big role.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>引っかかりを回避するのによくある手段のひとつは入力のデバウンス (debounce) です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A common way to work around the stutter is to "debounce" the input.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>デバウンスを行うと、ユーザがタイピングを止めた**後に**初めてリストの更新を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When debouncing, we only update the list *after* the user stops typing.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>しかしながら、タイプしている間は UI が更新されないというのはもどかしいものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, it can be frustrating that the UI doesn't update while we're typing.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>代わりに、入力をスロットル (throttle) して更新が一定以上の頻度で起きないようにすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an alternative, we could "throttle" the input, and update the list with a certain maximum frequency.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>しかし低パワーのデバイスではやはり引っかかりを感じることになってしまうでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But then on lower-powered devices we'd still end up with stutter.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>デバウンスもスロットルも理想的なユーザ体験にはならないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Both debouncing and throttling create a suboptimal user experience.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>引っかかりが発生する理由はシンプルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for the stutter is simple: once rendering begins, it can't be interrupted.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>レンダーが始まってしまったら中断できないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So the browser can't update the text input right after the key press.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>このため、ブラウザがキーの押下に応じてテキストを更新できなくなってしまうのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No matter how good a UI library (such as React) might look on a benchmark, if it uses blocking rendering, a certain amount of work in your components will always cause stutter.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ベンチマーク上で（React のような）UI ライブラリの性能がどれだけ良く見えようとも、それがブロッキングレンダリングを使用している限り、あなたのコンポーネントがやっている作業の一定の割合が引っかかりを発生させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And, often, there is no easy fix.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>そして簡単な修正方法はしばしば存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**Concurrent Mode fixes this fundamental limitation by making rendering interruptible.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**並列モードは、レンダーを中断可能にすることで、この本質的な制限を修正します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>** This means when the user presses another key, React doesn't need to block the browser from updating the text input.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**つまり、ユーザが別のキーを押下した時に、ブラウザによるテキストの入力フィールドの更新を、React はブロックする必要がない、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, it can let the browser paint an update to the input, and then continue rendering the updated list *in memory*.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>代わりに、ブラウザに入力フィールドの描画をさせつつ、**メモリ内**で更新後のリストのレンダーを継続することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the rendering is finished, React updates the DOM, and changes are reflected on the screen.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>レンダーが終わったところで、React は DOM を更新し、変更が画面に反映されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Conceptually, you can think of this as React preparing every update "on a branch".</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>概念的には、これは React がすべての更新を "ブランチ内で" 行っているようなものと考えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Just like you can abandon work in branches or switch between them, React in Concurrent Mode can interrupt an ongoing update to do something more important, and then come back to what it was doing earlier.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ブランチでの作業内容を破棄したりブランチ間を移動したりできるのと全く同様に、並列モードにおける React は、現在進行中の更新を中断してより重要な作業を行って、前にやっていた作業に戻ることができるのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This technique might also remind you of [double buffering](https://wiki.osdev.org/Double_Buffering) in video games.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>この技術はビデオゲームにおける[ダブルバッファリング](https://wiki.osdev.org/Double_Buffering)と似ているとも感じるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Concurrent Mode techniques reduce the need for debouncing and throttling in UI.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードの技術を使うことで、UI でのデバウンスやスロットルの必要性が下がります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because rendering is interruptible, React doesn't need to artificially *delay* work to avoid stutter.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>レンダーが中断可能なので、引っかかりを避けるために React は意図的にわざわざ作業を*遅らせる*必要がないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can start rendering right away, but interrupt this work when needed to keep the app responsive.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>即座にレンダーを開始して、必要に応じて中断することで、アプリケーションをレスポンシブに保つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Intentional Loading Sequences {#intentional-loading-sequences}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>### 計画的なローディングシーケンス {#intentional-loading-sequences}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We've said before that Concurrent Mode is like React working "on a branch".</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードとは React が "ブランチで" 作業するようなものだと言いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Branches are useful not only for short-term fixes, but also for long-running features.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ブランチは短期的な修正のためだけではなく、長期的な機能の実装の際にも有用ですね。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you might work on a feature, but it could take weeks before it's in a "good enough state" to merge into main.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ある機能のために作業をしていて、master にマージするのに「十分良い」状態になるまで何週間もかかる、ということがありえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This side of our version control metaphor applies to rendering too.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>バージョンコントロールの比喩は、この部分でもレンダーに当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Imagine we're navigating between two screens in an app.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>例えばアプリケーションの 2 つの画面を遷移しているところを考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes, we might not have enough code and data loaded to show a "good enough" loading state to the user on the new screen.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>時に、新しい画面ではユーザに表示するだけの「十分な」コードやデータがまだロードされていない、ということがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Transitioning to an empty screen or a large spinner can be a jarring experience.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>空のスクリーンや大きなスピナーに遷移することは不快なユーザ体験につながります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, it's also common that the necessary code and data doesn't take too long to fetch.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>一方で必要なコードやデータは取得するのにそれほど長い時間はかからないことも多いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**Wouldn't it be nicer if React could stay on the old screen for a little longer, and "skip" the "bad loading state" before showing the new screen?**</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**もし React が旧画面にもう少しだけ留まることで、新画面を表示する前の「望ましくないロード中状態」をスキップできたら良いと思いませんか？**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While this is possible today, it can be difficult to orchestrate.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>現在でもこれは可能ですが、うまく統合して行うのは困難です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Concurrent Mode, this feature is built-in.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードでは、この機能はビルトインされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React starts preparing the new screen in memory first — or, as our metaphor goes, "on a different branch".</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>React は新しい画面の準備をメモリ内で（つまりこれまでの比喩で言うところの「新しいブランチで」）まず行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So React can wait before updating the DOM so that more content can load.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>従って、React はより多くの読み込みができるよう、DOM を更新する前に待つことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Concurrent Mode, we can tell React to keep showing the old screen, fully interactive, with an inline loading indicator.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードでは、完全に操作可能な旧画面を表示したまま、ローディングのインジケータをインライン表示するよう React に伝えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And when the new screen is ready, React can take us to it.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>新しい画面の準備が完了したら、React が自動的にそちらを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Concurrency {#concurrency}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>### 並列性 {#concurrency}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's recap the two examples above and see how Concurrent Mode unifies them.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>上記の 2 つの例をまとめて、並列モードがこれらをどのように統合するのか見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**In Concurrent Mode, React can work on several state updates *concurrently***</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**並列モードでは、React は複数の状態の更新を*同時に*行うことができます**。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>— just like branches let different team members work independently:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ブランチによって複数のチームメンバーが同時に作業できるのと同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* For CPU-bound updates (such as creating DOM nodes and running component code), concurrency means that a more urgent update can "interrupt" rendering that has already started.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* CPU バウンドな更新（DOM ノードの作成やコンポーネント内のコードの実行など）の場合、並列化とはより緊急性の高い更新が既に始まった他のレンダーを中断できるということを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* For IO-bound updates (such as fetching code or data from the network), concurrency means that React can start rendering in memory even before all the data arrives, and skip showing jarring empty loading states.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* IO バウンドな更新（ネットワークからのコードやデータの取得など）の場合、並列化とは全データが到着する前に React がメモリ内でレンダーを始められ、目障りな空のロード中状態を表示しないで済むということを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Importantly, the way you *use* React is the same.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>重要なことは、React の*使い方*は変わらないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Concepts like components, props, and state fundamentally work the same way.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>コンポーネント、props、state といったコンセプトは本質的に同様に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you want to update the screen, you set the state.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>画面を更新したいと思ったら state を更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>React uses a heuristic to decide how "urgent" an update is, and lets you adjust it with a few lines of code so that you can achieve the desired user experience for every interaction.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>React は更新の「緊急性」を判断するための推測を行い、また数行のコードを使ってそれを調整することができるので、すべてのユーザ操作に対して望ましいユーザ体験を実現することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Putting Research into Production {#putting-research-into-production}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>## 研究からプロダクトへ {#putting-research-into-production}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is a common theme around Concurrent Mode features.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードの機能には共通のテーマがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>**Its mission is to help integrate the findings from the Human-Computer Interaction research into real UIs.**</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>**目標は、人間・コンピュータ間の相互作用に関する研究から得られた知見を現実の UI に取り込むことです。**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, research shows that displaying too many intermediate loading states when transitioning between screens makes a transition feel *slower*.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>例えば、研究によれば、画面間遷移の際にローディング中状態を多く表示しすぎることで、遷移が**遅く**感じられるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is why Concurrent Mode shows new loading states on a fixed "schedule" to avoid jarring and too frequent updates.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>これが並列モードにおいて目障りで頻繁すぎる更新を避けるため、ロード中状態を固定の「スケジュール」（遅延）を用いて表示する理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, we know from research that interactions like hover and text input need to be handled within a very short period of time, while clicks and page transitions can wait a little longer without feeling laggy.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>同様に、研究によって、ホバーやテキスト入力といった操作は非常に短い時間で処理される必要があり、一方でクリックやページ遷移は少し時間がかかっても遅いと感じられずに済む、ということが分かっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The different "priorities" that Concurrent Mode uses internally roughly correspond to the interaction categories in the human perception research.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードが内部で使用している様々な「優先度」は、人間の知覚に関する研究で使われる操作カテゴリに概ね対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Teams with a strong focus on user experience sometimes solve similar problems with one-off solutions.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>ユーザ体験を非常に重視するチームであれば、しばしば似たような問題をその場限りの手段で解決することでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, those solutions rarely survive for a long time, as they're hard to maintain.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>しかしそのような解決手段はメンテナンスが困難で、滅多に長続きしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Concurrent Mode, our goal is to bake the UI research findings into the abstraction itself, and provide idiomatic ways to use them.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>並列モードにおける我々の目的は、UI 研究の知見を抽象化そのものに組み入れて、それを使うための理想的な手段を提供することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a UI library, React is well-positioned to do that.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>UI ライブラリとして、React はそれができる良い立場にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Next Steps {#next-steps}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>## 次のステップ {#next-steps}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now you know what Concurrent Mode is all about!</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>これで並列モードが一体何物なのかについて分かりました！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the next pages, you'll learn more details about specific topics:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>以降のページでは、具体的なトピックに関して詳細を学んでいきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Suspense for Data Fetching](/docs/concurrent-mode-suspense.html) describes a new mechanism for fetching data in React components.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [サスペンスを使ったデータ取得](/docs/concurrent-mode-suspense.html)では React コンポーネントでデータを取得するための新たな仕組みについて解説します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Concurrent UI Patterns](/docs/concurrent-mode-patterns.html) shows some UI patterns made possible by Concurrent Mode and Suspense.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [並列的 UI パターン](/docs/concurrent-mode-patterns.html)では並列モードとサスペンスにより可能となるいくつかの UI パターンを提示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Adopting Concurrent Mode](/docs/concurrent-mode-adoption.html) explains how you can try Concurrent Mode in your project.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [並列モードの利用開始](/docs/concurrent-mode-adoption.html)ではあなたのプロジェクトで並列モードを試す方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>* [Concurrent Mode API Reference](/docs/concurrent-mode-reference.html) documents the new APIs available in experimental builds.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T042733Z">
        <seg>* [並列モード API リファレンス](/docs/concurrent-mode-reference.html)では実験的ビルドで利用可能な新しい API について述べます。</seg>
      </tuv>
    </tu>
  </body>
</tmx>
