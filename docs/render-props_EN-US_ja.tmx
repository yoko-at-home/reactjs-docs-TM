<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.2_0_6a661c5e0" segtype="sentence" srclang="EN-US"/>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>---
id: render-props
title: Render Props
permalink: docs/render-props.html
---</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>---
id: render-props
title: レンダープロップ
permalink: docs/render-props.html
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The term ["render prop"](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce) refers to a technique for sharing code between React components using a prop whose value is a function.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>["レンダープロップ (render prop)"](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce)という用語は、値が関数である props を使って、コンポーネント間でコードを共有するためのテクニックを指します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>レンダープロップを持つコンポーネントは、自身のレンダーロジックを実装する代わりに、React 要素を返す関数を受け取ってそれを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Libraries that use render props include [React Router](https://reacttraining.com/react-router/web/api/Route/render-func), [Downshift](https://github.com/paypal/downshift) and [Formik](https://github.com/jaredpalmer/formik).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>レンダープロップを用いたライブラリとしては、[React Router](https://reacttraining.com/react-router/web/api/Route/render-func) や [Downshift](https://github.com/paypal/downshift)、[Formik](https://github.com/jaredpalmer/formik) などがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this document, we’ll discuss why render props are useful, and how to write your own.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>このドキュメントでは、レンダープロップが役立つ理由と、その実装手順について解説します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Use Render Props for Cross-Cutting Concerns {#use-render-props-for-cross-cutting-concerns}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>## 横断的関心事にレンダープロップを使う {#use-render-props-for-cross-cutting-concerns}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Components are the primary unit of code reuse in React, but it's not always obvious how to share the state or behavior that one component encapsulates to other components that need that same state.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>コンポーネントは、React でコードを再利用するための主な要素ですが、あるコンポーネントがカプセル化した state や振る舞いを、同じ state を必要とする別のコンポーネントと共有する方法については、あまり自明ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the following component tracks the mouse position in a web app:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>たとえば、以下のコンポーネントは、ウェブアプリケーション内でのマウスの位置を追跡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As the cursor moves around the screen, the component displays its (x, y) coordinates in a `&lt;p&gt;`.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>画面上でカーソルが移動すると、コンポーネントはその (x, y) 座標を `&lt;p&gt;` 内に表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now the question is: How can we reuse this behavior in another component?</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>ここで疑問となるのは、この振る舞いを他のコンポーネントで再利用する方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, if another component needs to know about the cursor position, can we encapsulate that behavior so that we can easily share it with that component?</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>つまり、他のコンポーネントもカーソルの位置を知る必要がある時、この振る舞いだけをカプセル化し、そのコンポーネントと簡単に共有することは可能でしょうか？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since components are the basic unit of code reuse in React, let's try refactoring the code a bit to use a `&lt;Mouse&gt;` component that encapsulates the behavior we need to reuse elsewhere.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>コンポーネントは React でコードを再利用するための基本要素ですので、コードを少しリファクタリングし、他の場所で再利用したい振る舞いをカプセル化した `&lt;Mouse&gt;` というコンポーネントを作って、それを使うようにしてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now the `&lt;Mouse&gt;` component encapsulates all behavior associated with listening for `mousemove` events and storing the (x, y) position of the cursor, but it's not yet truly reusable.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>これで `&lt;Mouse&gt;` コンポーネントは、`mousemove` イベントとカーソルの (x, y) 座標に紐付けられた全ての振る舞いをカプセル化していますが、まだ再利用可能と言うには不十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, let's say we have a `&lt;Cat&gt;` component that renders the image of a cat chasing the mouse around the screen.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>たとえば、画面の中でマウスを追いかける猫の画像をレンダーする `&lt;Cat&gt;` コンポーネントがあるとしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We might use a `&lt;Cat mouse={{ x, y }}&gt;` prop to tell the component the coordinates of the mouse so it knows where to position the image on the screen.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>`&lt;Cat mouse={{ x, y }}&gt;` props を使って、このコンポーネントにマウスの座標を受け渡し、画面上のどこに猫の画像を配置すれば良いかを知らせたいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a first pass, you might try rendering the `&lt;Cat&gt;` *inside `&lt;Mouse&gt;`'s `render` method*, like this:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>手始めに、*`&lt;Mouse&gt;` の `render` メソッド内* で、以下のように `&lt;Cat&gt;` をレンダーしてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This approach will work for our specific use case, but we haven't achieved the objective of truly encapsulating the behavior in a reusable way.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>これだけが目的であれば正しく動作しますが、再利用可能な方法でこの振る舞いをカプセル化するという目的はまだ果たせていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, every time we want the mouse position for a different use case, we have to create a new component (i.e. essentially another `&lt;MouseWithCat&gt;`) that renders something specifically for that use case.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>他の異なるユースケースでもマウスの位置を知りたい場合、毎回そのユースケースに沿ったものをレンダーする新しいコンポーネント（つまり、本質的に別の `&lt;MouseWithCat&gt;`）を作成する必要があります。ここでレンダープロップの出番となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's where the render prop comes in: Instead of hard-coding a `&lt;Cat&gt;` inside a `&lt;Mouse&gt;` component, and effectively changing its rendered output, we can provide `&lt;Mouse&gt;` with a function prop that it uses to dynamically determine what to render–a render prop.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>`&lt;Mouse&gt;` コンポーネント内でハードコードされた `&lt;Cat&gt;` でレンダーの出力を変更する代わりに、`&lt;Mouse&gt;` コンポーネントに関数型の props を渡し、コンポーネントはその関数を使って何をレンダーすべきか動的に知るのです。これがレンダープロップの役割です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, instead of effectively cloning the `&lt;Mouse&gt;` component and hard-coding something else in its `render` method to solve for a specific use case, we provide a `render` prop that `&lt;Mouse&gt;` can use to dynamically determine what it renders.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>ここでは、特定のユースケースを解決するために `&lt;Mouse&gt;` コンポーネントを複製して `render` メソッドに他のものをハードコードする代わりに、`&lt;Mouse&gt;` に `render` プロパティを渡して、何をレンダーするか動的に決定できるようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More concretely, **a render prop is a function prop that a component uses to know what to render.**</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>より具体的に述べると、**レンダープロップとは、あるコンポーネントが何をレンダーすべきかを知るために使う関数型の props です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This technique makes the behavior that we need to share extremely portable.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>**このテクニックによって、再利用する必要がある振る舞いの移植性が極めて高くなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To get that behavior, render a `&lt;Mouse&gt;` with a `render` prop that tells it what to render with the current (x, y) of the cursor.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>その振る舞いをさせるためには、現在のカーソルの (x, y) 座標にレンダーするものを示す `render` プロパティを使って `&lt;Mouse&gt;` をレンダーすれば良いのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One interesting thing to note about render props is that you can implement most [higher-order components](/docs/higher-order-components.html) (HOC) using a regular component with a render prop.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>レンダープロップの興味深い点として、多くの[高階コンポーネント](/docs/higher-order-components.html) (HOC) がレンダープロップを使った通常のコンポーネントによって実装可能ということが挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if you would prefer to have a `withMouse` HOC instead of a `&lt;Mouse&gt;` component, you could easily create one using a regular `&lt;Mouse&gt;` with a render prop:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>たとえば、`&lt;Mouse&gt;` コンポーネントよりも `withMouse` HOC が好みであれば、レンダープロップを持つ `&lt;Mouse&gt;` を使って簡単に作成可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So using a render prop makes it possible to use either pattern.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>つまり、レンダープロップによってどちらのパターンも可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Using Props Other Than `render` {#using-props-other-than-render}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>## `render` 以外の props を使う {#using-props-other-than-render}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It's important to remember that just because the pattern is called "render props" you don't *have to use a prop named `render` to use this pattern*.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>このパターンが「レンダープロップ」という名前だからといって、必ずしも *`render` という名前の props を使う必要はない*ということを念頭に置いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, [*any* prop that is a function that a component uses to know what to render is technically a "render prop"](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce).</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>実際、[コンポーネントがレンダーするものを知るために使う関数の props は、*その名前が何であれ*、技術的には「レンダープロップ」と呼ぶことができます](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although the examples above use `render`, we could just as easily use the `children` prop!</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>上記の例では `render` を用いていますが、`children` プロパティを使っても同じくらい簡単です！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And remember, the `children` prop doesn't actually need to be named in the list of "attributes" in your JSX element.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>さらに、`children` プロパティは実際には JSX 要素の「属性」の一覧内で名前を付ける必要がないことも忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, you can put it directly *inside* the element!</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>代わりに、要素*内部に*直接設定可能です！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You'll see this technique used in the [react-motion](https://github.com/chenglou/react-motion) API.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>このテクニックは、[react-motion](https://github.com/chenglou/react-motion) の API などで使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since this technique is a little unusual, you'll probably want to explicitly state that `children` should be a function in your `propTypes` when designing an API like this.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>このテクニックは若干珍しいため、このような API 設計時には、`children` が関数であることを `propTypes` で明示した方が良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>## Caveats {#caveats}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>## 注意事項 {#caveats}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>### Be careful when using Render Props with React.PureComponent {#be-careful-when-using-render-props-with-reactpurecomponent}</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>### レンダープロップを React.PureComponent で使うときの注意点 {#be-careful-when-using-render-props-with-reactpurecomponent}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using a render prop can negate the advantage that comes from using [`React.PureComponent`](/docs/react-api.html#reactpurecomponent) if you create the function inside a `render` method.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>レンダープロップを使う際、`render` メソッド内で関数を作成していると、[`React.PureComponent`](/docs/react-api.html#reactpurecomponent) を使う利点が相殺されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is because the shallow prop comparison will always return `false` for new props, and each `render` in this case will generate a new value for the render prop.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>これは props の浅い (shallow) 比較は新しい props の値に対して常に `false` を返し、そして `render` は毎回レンダープロップとして新しい値を生成するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, continuing with our `&lt;Mouse&gt;` component from above, if `Mouse` were to extend `React.PureComponent` instead of `React.Component`, our example would look like this:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>たとえば、上記の `&lt;Mouse&gt;` コンポーネントの場合、`Mouse` が `React.Component` ではなく `React.PureComponent` を継承していたとすると、次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, each time `&lt;MouseTracker&gt;` renders, it generates a new function as the value of the `&lt;Mouse render&gt;` prop, thus negating the effect of `&lt;Mouse&gt;` extending `React.PureComponent` in the first place!</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>この例では、`&lt;MouseTracker&gt;` がレンダーされるたびに `&lt;Mouse render&gt;` プロパティの値として新しい関数が生成されるので、`&lt;Mouse&gt;` が `React.PureComponent` を継承している効果がそもそもなくなってしまいます！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To get around this problem, you can sometimes define the prop as an instance method, like so:</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>この問題を回避するため、レンダープロップをインスタンスメソッドとして次のように定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In cases where you cannot define the prop statically (e.g. because you need to close over the component's props and/or state) `&lt;Mouse&gt;` should extend `React.Component` instead.</seg>
      </tuv>
      <tuv xml:lang="ja" creationid="OmegaT Aligner" creationdate="20210727T072332Z">
        <seg>props を静的に定義できない場合（たとえば、コンポーネントの props や state をクロージャで囲む場合など）、`&lt;Mouse&gt;` は代わりに `React.Component` を継承すべきです。</seg>
      </tuv>
    </tu>
  </body>
</tmx>
